#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* a function that takes in a pointer to structure variable and de-allocates memory for the matrix*/
void free_matrix(char **strmat, int rows)
{
	int i;
	for (i = 0; i < rows; i++)
	{
		free(strmat[i]);
	}
	free(strmat);
}

void lowercase_remove_punct(char *original_string, char *processed_string)
{
	int i1, i2;
	char c;
	for (i1 = 0, i2 = 0; i1<strlen(original_string); i1++)
	{
		c = original_string[i1];
		if ((c >= 'A') && (c <= 'Z'))
			processed_string[i2++] = original_string[i1] - 'A' + 'a';
		if (((c >= 'a') && (c <= 'z')) || (c == '\''))
			processed_string[i2++] = original_string[i1];
	}
	processed_string[i2] = '\0';
}
struct misspelled_words
{
	int number_misspelled;
	char** misspelled;
};

char** ReadDict()
{
	FILE* dict;
	char **strmat, temp_line[100];
	int i = 0, string_size, file;

	/*opens the file for reading*/
	dict = fopen("c:\\dict.txt", "r");
	/*checks if we can open the file, otherwise output error message*/
	if (dict == NULL)
	{
		printf("Could not open dict.txt for reading \n");
	}
	else
	{
		/*allocates the memory location to the rows or the array of pointers to the columns*/
		strmat = (char **)malloc(sizeof(char*)* 1000);

		/*allocates the memory location to the rows using a for loop*/

		do
		{
			/*temp_line is now the contents of the line in the file*/
			file = fscanf(dict, "%s", temp_line);
			if (file != EOF)
			{
				string_size = strlen(temp_line) + 1;
				lowercase_remove_punct(temp_line, temp_line);
				strmat[i] = (char *)malloc(sizeof(char)*string_size);
				strcpy(strmat[i], temp_line);
				i++;
			}


		} while (file != EOF);

		/*closes the file*/
		fclose(dict);

	}
	return strmat;
}
void chk_last_chars(char *misspelled)
{
	char **dictmat, temp[20], temp_dict[20];
	int i;
	dictmat = ReadDict();
		for (i = 0; i < 1000; i++)
		{
			if (strlen(misspelled) == strlen(dictmat[i]))
			{
				strncpy(temp, misspelled,strlen(misspelled)-2);
				temp[strlen(misspelled)-2] = '\0';
				strncpy(temp_dict, dictmat[i],strlen(dictmat[i])-2);
				temp_dict[strlen(dictmat[i])-2] = '\0';
			if (strcmp(temp, temp_dict) == 0)
			{
				if (misspelled[strlen(misspelled)-1] == dictmat[i][strlen(dictmat[i])-2])
					{
					 if (misspelled,misspelled[strlen(misspelled)-2] == dictmat[i][strlen(dictmat[i])-1])
					 {
						printf("Suggestions:");
						printf("\n\t%s ===> %s\n" ,misspelled, dictmat[i]);
					 }
				}
			}
			}
		}
}
void chk_one_char(char *misspelled)
{
	char *temp;
	char **dictmat;
	int i, j, diff_chars;

	dictmat = ReadDict();
	for(i=0; i<1000; i++)
	{
		if (strlen(misspelled) == strlen(dictmat[i]))
		{
			diff_chars=0;
			for (j=0; j<strlen(dictmat[i]); j++)
			{
				if((int)misspelled[j] != (int)dictmat[i][j])
					diff_chars++;
			}
			if (diff_chars==1){
			  printf("Suggestions:");
			  printf("\n\t%s ===> %s\n" ,misspelled, dictmat[i]);
			}
		}
	}

}
int find_misspelled(void)
{
	char **dictmat;
	char temp[100];
	int i = 0, file, found = 0, number_misspelled = 0;

	FILE* input;

	dictmat = ReadDict();


	/*opens the text file*/
	input = fopen("D:\\Users\\Roman\\Documents\\Visual Studio\\Lab5A\\ee1e2_lab5_additional_files\\ee1e2_lab5_additional_files\\textfile.txt", "r");

	/*checks if we can open the file, otherwise output error message*/
	if (input == NULL)
	{
		printf("Could not open textfile.txt for reading \n");
	}
	else
	{
		/*allocates the memory location to the rows using a for loop*/

		do
		{
			/*temp_line is now the contents of the line in the file*/
			file = fscanf(input, "%s", temp);
			if (file != EOF)
			{

				lowercase_remove_punct(temp, temp);
				for (i = 0; i < 1000; i++)
				{
					if (strcmp(temp, dictmat[i]) == 0)
					{
						/*it has found the word in the dictionary*/
						found = 1;

					}
				}
				/*it has not found a word in the dictionay, so the word must be misspelt*/
				if (found == 0 && (strcmp(temp, "") !=0))
				{
					/*temp is the variable that is misspelt*/
					printf("%s \n",temp);
					number_misspelled++;
					chk_last_chars(temp);
					chk_one_char(temp);
				}
				found = 0;
			}

		} while (file != EOF);

		/*closes the file*/
		fclose(input);
	}

	free_matrix(dictmat, 1000);
	return number_misspelled;

}

int main(void)
{
	find_misspelled();
}

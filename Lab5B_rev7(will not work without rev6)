#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* a function that takes in a pointer to structure variable and de-allocates memory for the matrix*/
void free_matrix(char **strmat, int rows)
{
	int i;
	for (i = 0; i < rows; i++)
	{
		free(strmat[i]);
	}
	free(strmat);
}

void lowercase_remove_punct(char *original_string, char *processed_string)
{
	int i1, i2;
	char c;
	for (i1 = 0, i2 = 0; i1<strlen(original_string); i1++)
	{
		c = original_string[i1];
		if ((c >= 'A') && (c <= 'Z'))
			processed_string[i2++] = original_string[i1] - 'A' + 'a';
		if (((c >= 'a') && (c <= 'z')) || (c == '\''))
			processed_string[i2++] = original_string[i1];
	}
	processed_string[i2] = '\0';
}
struct misspelled_words
{
	int number_misspelled;
	char** misspelled;
};

char** ReadDict()
{
	FILE* dict;
	char **strmat, temp_line[100];
	int i = 0, string_size, file;

	/*opens the file for reading*/
	dict = fopen("c:\\dict.txt", "r");
	/*checks if we can open the file, otherwise output error message*/
	if (dict == NULL)
	{
		printf("Could not open dict.txt for reading \n");
	}
	else
	{
		/*allocates the memory location to the rows or the array of pointers to the columns*/
		strmat = (char **)malloc(sizeof(char*)* 1000);

		/*allocates the memory location to the rows using a for loop*/

		do
		{
			/*temp_line is now the contents of the line in the file*/
			file = fscanf(dict, "%s", temp_line);
			if (file != EOF)
			{
				string_size = strlen(temp_line) + 1;
				lowercase_remove_punct(temp_line, temp_line);
				strmat[i] = (char *)malloc(sizeof(char)*string_size);
				strcpy(strmat[i], temp_line);
				i++;
			}


		} while (file != EOF);

		/*closes the file*/
		fclose(dict);

	}
	return strmat;
}
void find_misspelled(void)
{
	char **dictmat;
	char temp[100];
	int i = 0, comp, file, found = 0, j = 0, foundmiss = 0;

	FILE* input;

	dictmat = ReadDict();


	/*opens the text file*/
	input = fopen("y:\\textfile.txt", "r");

	/*checks if we can open the file, otherwise output error message*/
	if (input == NULL)
	{
		printf("Could not open textfile.txt for reading \n");
	}
	else
	{
		/*allocates the memory location to the rows using a for loop*/

		do
		{
			/*temp_line is now the contents of the line in the file*/
			file = fscanf(input, "%s", temp);
			if (file != EOF)
			{

				lowercase_remove_punct(temp, temp);
				for (i = 0; i < 1000; i++)
				{
					comp = strcmp(temp, dictmat[i]);
					if (comp == 0)
					{
						/*it has found the word in the dictionary*/
						found = 1;

					}

				}

				/*it has not found a word in the dictionay, so the word must be misspelt*/
				if (found == 0 && (strcmp(temp, "") !=0))
				{

					/*temp is the variable that is misspelt*/
					printf("\n%c \n",temp[0]);

					/*checks for a difference of one letter*/
					//one_let(temp);
				}
				found = 0;
				foundmiss = 0;


			}

		} while (file != EOF);

		/*closes the file*/
		fclose(input);


	}


	free_matrix(dictmat);


	return 0;


}
void find_similar(struct misspelled_words *misspelled)
{
	char **dictmat, last, temp[20], temp_dict[20];
	int i, j, str_length=0;
	dictmat = ReadDict();
	for (j=0; j<misspelled->number_misspelled; j++)
	{
		for (i = 0; i < 1000; i++)
		{
			if (strlen(misspelled->misspelled[j]) == strlen(dictmat[i]))
			{
				strncpy(temp, misspelled->misspelled[j],strlen(misspelled->misspelled[j])-2);
			temp[strlen(misspelled->misspelled[j])-2] = '\0';
			strncpy(temp_dict, dictmat[i],strlen(dictmat[i])-2);
			temp_dict[strlen(dictmat[i])-2] = '\0';
			if (strcmp(temp, temp_dict) == 0)
			{
				//if (misspelled->misspelled[j][strlen(misspelled->misspelled[j])-1] == dictmat[i][strlen(dictmat[i])-2])
					//{
				//	 if (misspelled->misspelled[j],misspelled->misspelled[j][strlen(misspelled->misspelled[j])-2] == dictmat[i][strlen(dictmat[i])-1])
						printf("\t%s ===> %s\n" ,misspelled->misspelled[j], dictmat[i]);
				//}
			}
			}
		}
	}
}
				

int main(void)
{

	struct misspelled_words misspelld_found;

	find_misspelled(&misspelld_found);
	printf("Suggestions:\n");
	find_similar(&misspelld_found);
	printf("Total %d misspelled words have been found\n", misspelld_found.number_misspelled);
	//printf("first letter: %c\n" ,*(*(misspelld_found.misspelled+5))+0);
	return 0;
}

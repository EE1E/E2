NEEDS A FREE!!
#include <stdio.h>

/*struct data type of matrices A and B will be of this data type. This struct will contain the dimensions and the matrix data.*/
struct matrix
{
	int rows;
	int col;
	float **Data;
};


void read_matrix(struct matrix *matrixY)
{
	int i,j;
	float temp;
	printf("Number of rows: ");
	scanf("%d",&matrixY->rows);
	printf("Number of columns: ");
	scanf("%d",&matrixY->col);

	/*allocates the memory location to the rows or the array of pointers to the collumns*/
	matrixY->Data=(float **)malloc(sizeof(float *)*matrixY->rows);

	/*allocates the memory location to the columns using a for loop*/
	for(i=0;i<matrixY->col;i++)
	{
		matrixY->Data[i]=(float *)malloc(sizeof(float)*matrixY->col);
	}

	printf("Enter matrix data: \n");

	for ( i = 0; i < matrixY->rows; i++)
	{
		for(j=0;j<matrixY->col;j++)
		{
			scanf("%f",&matrixY->Data[i][j]);

		}
	}
}

int main(void)
{
	int i,j;	

	/*instatiates the matrixA and matrixB to a struct data type*/
	struct matrix matrixA,matrixB;



	printf("This is matrix A \n");
	read_matrix(&matrixA);

	printf("\nThis is matrix B \n");
	read_matrix(&matrixB);

	/*prints out matrix A*/
	printf("\nA is: \n");

	for ( i = 0; i < matrixA.rows; i++)
	{
		for(j=0;j<matrixA.col;j++)
		{
			printf("%.1f ",matrixA.Data[i][j]);
		}
		printf("\n");
	}


	/*Prints out matrix B*/
	printf("\nB is: \n");
	for ( i = 0; i < matrixB.rows; i++)
	{
		for(j=0;j<matrixB.col;j++)
		{
			printf("%.1f ",matrixB.Data[i][j]);
		}
		printf("\n");
	}

	return 0;


}



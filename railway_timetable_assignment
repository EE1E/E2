#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

struct data
{
	char* station;
	char *destination;
	int departure;
	int arrival;
	struct data *next;
};
struct data* append_node(struct data** head, struct data* node_pointer)
{
	struct data* temp;

	if (*head == NULL)
		*head = node_pointer;
	else
	{
		for(temp=*head;temp->next!=NULL; temp=temp->next);
		temp->next=node_pointer;
	}
	return node_pointer;
}
void select_stations(struct data* head)
{
	int i=0,j=0,time, diff;
	char temp_cmp[20], select_station[20], select_destination[20];
	struct data* temp;

		for(temp=head; temp!=NULL; temp=temp->next)
		{
			if(strcmp(temp_cmp, temp->station)){
			i++;
			printf("%d %s\n", i, temp->station);
			}

			strcpy(temp_cmp, temp->station);
		}
		printf("Please select your departure station:\n");
			do{
				scanf("%d", &j);
				if (j<1 || j>i)
				printf("Unknown option! Please select your departure station:\n");

			}while(j<1 || j>i);
			i=1;
			strcpy(temp_cmp, "");

		for(temp=head; temp!=NULL; temp=temp->next)
		{
			if(strcmp(temp_cmp, temp->station)){
				if (i==j){
					strcpy(select_station,temp->station);
					printf("Possible destinations from %s:\n",temp->station);
				}

				i++;
			}
			strcpy(temp_cmp, temp->station);
		}
		i=0;
		strcpy(temp_cmp, "");
		for(temp=head; temp!=NULL; temp=temp->next)
		{
			if (!strcmp(select_station, temp->station))
			{
				if(strcmp(temp_cmp, temp->destination))
				{
					i++;
					printf("%d %s\n", i, temp->destination);
				}

			strcpy(temp_cmp, temp->destination);
			}
		}
		printf("Please select your arrival station:\n");
			do{
				scanf("%d", &j);
				if (j<1 || j>i)
				printf("Unknown option! Please select your arrival station:\n");

			}while(j<1 || j>i);
			i=1;
			strcpy(temp_cmp, "");

		for(temp=head; temp!=NULL; temp=temp->next)
		{
			if (!strcmp(select_station, temp->station))
			{
				if(strcmp(temp_cmp, temp->destination))
				{
					if(i==j)
					{
						strcpy(select_destination, temp->destination);
					}
					i++;
				}

			strcpy(temp_cmp, temp->destination);
			}
		}
		printf("Departure station: %s\nArrival station: %s\n", select_station, select_destination);
		printf("Please enter desired time of arrival in hhmm (24-h) format:\n");
		scanf("%d", &time);
		printf("Suggested journey/s:\n");
		for(temp=head; temp!=NULL; temp=temp->next){
			if (!strcmp(select_station, temp->station) && !strcmp(select_destination, temp->destination))
			{
				if (convert_time(temp->arrival) - convert_time(time) < -120)
					diff = (convert_time(temp->arrival) +(1440 - convert_time(time)));
				else
					diff = convert_time(temp->arrival) - convert_time(time);

			if ((diff>=-120) && (diff<=0))
				printf("\tDepart: %4d Arrive: %4d diff:%4d\n", temp->departure, temp->arrival, diff);
			}
		}

}
int convert_time(int raw_time)
{
	float temp;
	int mins;

	temp = raw_time;
	mins = floor( temp /100)*60 + (temp/100 - floor(temp/100))*100;
	return mins;	
}

int main(void)
{
	int i, file, time_depature, time_arrival;
	char temp_str, temp_station[20], temp_destination[20];
	struct data* current;
	struct data* head=NULL;
	FILE* input;

	input = fopen("c:\\times.txt", "r");
	if (input == NULL)
	{
		printf("Could not open dict.txt for reading \n");
	}
	else
	{
		/*allocates the memory location to the rows or the array of pointers to the columns*/
		
		do
		{
			/*temp_line is now the contents of the line in the file*/
			file = fscanf(input, "%s", temp_station);
			file = fscanf(input, "%s", temp_destination);
			file = fscanf(input, "%d", &time_depature);
			file = fscanf(input, "%d", &time_arrival);
			/*makes sure does not go to the end of file*/
			if (file != EOF)
			{
				current = (struct data*)malloc(sizeof(struct data));
					if (current)
					{
						current->station = (char*)malloc(sizeof(char)*(sizeof(temp_station)+1));
						current->destination = (char*)malloc(sizeof(char)*(sizeof(temp_destination)+1));
						strcpy(current->station, temp_station);
						strcpy(current->destination, temp_destination);
						current->departure = time_depature;
						current->arrival = time_arrival;
						current->next=NULL;
						append_node(&head, current);
					}

			}


		} while (file != EOF);

		/*closes the file*/
		fclose(input);

	}

	select_stations(head);

	return 0;
}
